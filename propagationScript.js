/** @param {NS} ns **/
export async function main(ns) {

   ns.toast('Running cracker on ' + ns.getHostname(), 'info')
   
   let servers = ns.scan(ns.getHostname()) // scans host and stores neighbors in an array

   const INDEX = servers.indexOf('home')

   if (INDEX > -1) {
      servers.splice(INDEX, 1);
   }

   // iterates through array of servers and stores each one in the target variable until the logic is run on it
   for (let target of servers) {

      let hacktoolnum = 0

      // if no access, opens ports with corresponding .exe if available
      if (!ns.hasRootAccess(target)) {

         // ns.toast('Opening ports on ' + target)

         if (ns.fileExists('BruteSSH.exe', 'home')) {
            ns.brutessh(target)
            hacktoolnum++
         }

         if (ns.fileExists('FTPCrack.exe', 'home')) {
            ns.ftpcrack(target)
            hacktoolnum++
         }

         if (ns.fileExists('relaySMTP.exe', 'home')) {
            ns.relaysmtp(target)
            hacktoolnum++
         }

         if (ns.fileExists('HTTPWorm.exe', 'home')) {
            ns.httpworm(target)
            hacktoolnum++
         }

         if (ns.fileExists('SQLInject.exe', 'home')) {
            ns.sqlinject(target)
            hacktoolnum++
         }

      } // end of if statement

      //if you don't have access, your hacking level is high enough and used enough tools; nuke target servers
      if (ns.getServerNumPortsRequired(target) <= hacktoolnum &&
         !ns.hasRootAccess(target) &&
         ns.getServerRequiredHackingLevel(target) <= ns.getHackingLevel()) {

         // ns.toast("nuking " + target);

         while (!ns.hasRootAccess(target)) {
            ns.nuke(target);
         } // end of while loop
      } // end of if statement
      else {
         //if you still don't have access, skip
         if (!ns.hasRootAccess(target)) {
            ns.toast("unable to gain root to " + target, "error");
            continue;
         }// end of if statement
      } // end of else statement

      //get ram for hack script
      var scriptRAM = ns.getScriptRam('malware.js', target);
      //get available server ram for targeted server
      var availableRAM = ns.getServerMaxRam(target) - ns.getServerUsedRam(target);
      //calculate threads for hack script on target server
      var threads = Math.floor(availableRAM / scriptRAM);

      // if RAM available is greater than both this script and the malware script it will copy and run both scripts over
      // otherwise it will only copy the malware script over 
      if (availableRAM > ns.getScriptRam(ns.getScriptName())) {
         //calculate threads for hack script alongside propogation script for target server
         //threads = Math.floor(availableRAM - ns.getScriptRam(ns.getScriptName()) / scriptRAM);

         // ns.toast('Copying propagation script to' + target + 'and executing', 'success');

         await ns.scp(ns.getScriptName(), 'home', target);

         ns.exec(ns.getScriptName(), target);

      } // end of if statement
      else {
         ns.toast('Could not copy/execute propagation script on this target ' + target, 'error')
      }

      // if the RAM avaiabile is less than what the malware script uses, copies malware and executes it
      if (availableRAM > scriptRAM) {

         // ns.toast('Copying malware to server', 'success');

         await ns.scp('malware.js', 'home', target);

         await ns.scp('malwareStarter.js', 'home', target);

         if (availableRAM > ns.getScriptRam('malwareStarter.js')) {
            ns.exec('malwareStarter.js', target)
         }
         else {
            ns.toast('Could not execute malwareStart script on this target ' + target, 'error')
         }
      } // end of if statement
      else {
         ns.toast('Could not copy malware script on this target ' + target, 'error')
      }
   } // end of for loop
} // end of main function
